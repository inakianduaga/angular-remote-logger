"use strict";angular.module("angular-remote-logger",[]).config(["$httpProvider",function(t){t.interceptors.push("httpInterceptor")}]);
"use strict";angular.module("angular-remote-logger").factory("httpInterceptor",["$q","$injector","$rootScope","XHR_LOGGER_CONFIG",function(r,t,e,o){function n(r){var e={method:"post",url:o.remoteLogUrl,data:r};r.config.url!==o.remoteLogUrl&&t.get("$http")(e).catch(function(){console.log("The http interceptor logging has failed!")})}return{responseError:function(t){return o.enabled&&(n(t),e.$broadcast("xhrRequest.error",t)),r.reject(t)}}}]);
"use strict";angular.module("angular-remote-logger").config(["$provide","LOG_LOGGER_CONFIG",function(o,e){o.decorator("$log",["$delegate","$injector",function(o,r){function n(o,n){var t={method:"post",url:e.remoteLogUrl,data:{message:o,logType:n}};r.get("$http")(t).catch(function(){console.log("Failed to remotely post log!")})}var t=["log","warn","info","error","debug"],g={log:o.log,warn:o.warn,info:o.info,error:o.error,debug:o.debug};return t.forEach(function(r){o[r]=function(o){e.enabled.global&&e.enabled[r]&&n(o,r),g[r](arguments)},o[r].logs=[]}),o}])}]);
"use strict";angular.module("angular-remote-logger").config(["$provide","EXCEPTION_LOGGER_CONFIG",function(o,e){function n(){var o=new Date,n=o.getSeconds(),r=0;t.history[n]=n in t.history?t.history[n]+1:1;for(var i=n-e.windowInSeconds+1;n>=i;i++)i in t.history&&(r+=t.history[i]);return r>e.maxExceptionsPerWindow}var t={history:{}};o.decorator("$exceptionHandler",["$delegate","$injector",function(o,t){function r(o,n){var r={method:"post",url:e.remoteLogUrl,data:{exception:o,cause:n}};t.get("$http")(r).catch(function(){console.log("Failed to remotely log exception!")})}return function(i,c){e.enabled&&(t.get("$rootScope").$broadcast("exception",i),n()?console.log("Too many exceptions in the last "+e.windowInSeconds+" seconds, skipping remote logging"):r(i,c)),o(i,c)}}])}]);
angular.module("angular-remote-logger").constant("EXCEPTION_LOGGER_CONFIG",{windowInSeconds:5,maxExceptionsPerWindow:4,remoteLogUrl:"localhost",enabled:!0}).constant("XHR_LOGGER_CONFIG",{remoteLogUrl:"localhost",enabled:!0}).constant("LOG_LOGGER_CONFIG",{remoteLogUrl:"localhost",enabled:{global:!0,warn:!0,error:!0,info:!0,log:!0,debug:!0}});