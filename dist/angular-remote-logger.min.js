"use strict";angular.module("angular-remote-logger",[]).config(["$httpProvider",function(t){t.interceptors.push("httpInterceptor")}]);
"use strict";angular.module("angular-remote-logger").factory("httpInterceptor",["$q","$injector","$rootScope","XHR_LOGGER_CONFIG",function(r,t,e,o){function n(r){var e={method:"post",url:o.remoteLogUrl,data:r};r.config.url!==o.remoteLogUrl&&t.get("$http")(e).catch(function(){console.log("The http interceptor logging has failed!")})}return{responseError:function(t){return n(t),e.$broadcast("xhrRequest.error",t),r.reject(t)}}}]);
"use strict";angular.module("angular-remote-logger").config(["$provide","EXCEPTION_LOGGER_CONFIG",function(o,e){function t(){var o=new Date,t=o.getSeconds(),r=0;n.history[t]=t in n.history?n.history[t]+1:1;for(var i=t-e.windowInSeconds+1;t>=i;i++)i in n.history&&(r+=n.history[i]);return r>e.maxExceptionsPerWindow}var n={history:{}};o.decorator("$exceptionHandler",["$delegate","$injector",function(o,n){function r(o,t){var r={method:"post",url:e.remoteLogUrl,data:{exception:o,cause:t}};n.get("$http")(r).catch(function(){console.log("Failed to remotely log exception!")})}return function(i,c){n.get("$rootScope").$broadcast("exception",i),t()?console.log("Too many exceptions in the last "+e.windowInSeconds+" seconds, skipping remote logging"):r(i,c),o(i,c)}}])}]);
angular.module("angular-remote-logger").constant("EXCEPTION_LOGGER_CONFIG",{windowInSeconds:5,maxExceptionsPerWindow:4,remoteLogUrl:"localhost"}).constant("XHR_LOGGER_CONFIG",{remoteLogUrl:"localhost"});